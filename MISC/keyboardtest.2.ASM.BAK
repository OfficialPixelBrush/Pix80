MEM0:     EQU 0b00000000
KEYBOARD: EQU 0b00010000
HEXPRINT: EQU 0b00100000
CMD: EQU 0xF000
STR: EQU 0xE000
NEWLINE: EQU 0x0A
NULL: EQU 0x00
; IX = Command Pointer
; IY = String Pointer
LD IX,CMD      
; KEYBOARD TEST
IM 0 ; Interrupt Mode 0
LD A,'>'
OUT (MEM0),A

getNextInput:
EI ; Renable interrupts
; NOTE: HALT disables interrupts after being triggered
; So interrupts need to be re-enabled every time
HALT ; Wait for next keyboard input
IN  A,(KEYBOARD) ; Read A in
CP 8  ; Check if backspace
JR NZ,skipBackspace ; Doesn't visually update yet, but works!
DEC IX
LD (IX),NULL
JR getNextInput
skipBackspace:
CP 13 ; Check if carriage return
; If Zero flag is triggered, newline has been entered
OUT (MEM0),A ; Doesn't affect flags
LD (IX),A    ; Doesn't affect flags
INC IX       ; Doesn't affect flags
;LD IY,exampleCommand1
;CALL Z,checkCommand ; Compare string
CALL Z,instructionAnalysis
JR getNextInput  ; Jump back

instructionAnalysis:
PUSH BC
; Print Newline
LD A,NEWLINE
OUT (MEM0),A
; Check first Character of command to select mode
LD IX,CMD
LD A,(IX)
; Check instruction
CP 'R'
CALL Z,ReadInstruction
CP 'W'
CALL Z,WriteInstruction
CP 'E'
CALL Z,ExecuteInstruction
; Fall through
CALL clearCmdBuffer
; Print Newline
LD A,NEWLINE
OUT (MEM0),A
; Print leading char
LD A,'>'
OUT (MEM0),A
LD IX,CMD
RET

ReadInstruction:
CALL asciiToWord
LD A,(HL)
CALL printByte
;OUT (HEXPRINT),A ; implement hex to ascii routine
RET

WriteInstruction:
CALL asciiToByte ; read byte
PUSH AF ; push AF to stack
INC IX ; go to next char
LD A,(IX)
CP ','
CALL Z,asciiToWord ; implement Auto increment
POP AF
LD (HL),A
RET

ExecuteInstruction:
CALL asciiToWord
JP (HL)
RET

InvalidInstruction:
LD IY,unknownCommand
CALL printstr
RET

asciiToWord:
CALL asciiToByte
LD H,L
CALL asciiToByte
RET
            
asciiToByte:
LD L,0x00
INC IX
LD A,(IX) ; load IX into A
CALL asciiToHex
; shift over into upper nibble
LD L,A
SLA L
SLA L
SLA L
SLA L
; Shift over by 4 bytes 
INC IX
LD A,(IX) ; load IX into A
CALL asciiToHex
OR L
LD L,A 
RET

; printByte
; byte to print in A
printByte:
LD L,A
SRL A
SRL A
SRL A
SRL A  ; extract upper nibble
CALL hexToAscii
OUT (MEM0),A
LD A,L
CALL hexToAscii
OUT (MEM0),A
RET

; converts whatever char is in A into A
; A = (byte)A
asciiToHex:
SUB 0x30 ; To center at 0
CP 0x10  ; Check if greater than '@' (0x10)
RET C    ; Exit if greater than '@' (0x10)
SUB 0x07 ; Adjust to make letters work
RET

; converts whatever number is given into ASCII
; A = (char)A
hexToAscii:
AND 0x0F ; Make sure we're only dealing with lower nibble
ADD A,0x30
CP 0x3A  ; Check if greater than 9
RET C
ADD A,0x07 ; Adjust to get to letters
RET

; IY will be loaded with pointer to command to check
; checkCommand:
; Print Newline
; LD A,NEWLINE
; OUT (MEM0),A
; Compare string at CMD and STR
; LD IX,CMD
; CALL strcmp ; Should set Zero Flag if same
; LD IY,exampleCommand1Output
; CALL Z,printstr            ; If Same, Print Output
; LD IY,unknownCommand
; CALL NZ,printstr           ; IF Different, Print Invalid
; CALL clearCmdBuffer
; LD A,'>'
; OUT (MEM0),A
; LD IX,CMD
; RET

strcmp:
LD A,(IY) ; Load content of IY in
CP NULL   ; Check for Null pointer
RET Z     ; Exit if NULL
CP (IX)   ; Compare against IX
RET NZ    ; Exit if not the same
INC IX
INC IY
JR strcmp

; Print string at location given by STR
printstr:
LD A,(IY) ; load value in
CP NULL
JR Z,stringEnd 
OUT (MEM0),A
INC IY
JR printstr
stringEnd:
RET

; probably faster to just check until end of actually written text
; instead of clearing entire buffer
clearCmdBuffer:
LD IX,CMD
LD A,0x00
LD B,0x10 ; Buffer is probably not gonna be 256 Bytes
clearCmdBufferLoop:
CP B
RET Z ; Exit if Zero
LD (IX),NULL
INC IX
INC A
JR clearCmdBufferLoop

unknownCommand:
DEFM "Unknown",NULL
failedAccessingROM:
DEFM "Cannot access ROM",NULL
